/*! For license information please see Navigation.js.LICENSE.txt */
(()=>{"use strict";var e,n,t,r,o,a,i,u,c,l,s,f,d,p,A,v={799:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"div.databases-wrapper {\n  color: yellow;\n  margin-top: 50px;\n  height: 80vh;\n  overflow: scroll;\n  border: 1px black solid;\n  position: absolute;\n  bottom: 10%;\n  margin: 0;\n  left: 3%;\n  right: 3%;\n  padding: none;\n\n  display: flex;\n}\n\ndiv.makesee {\n  background-color: black;\n  width: 100%;  \n  display: flex;\n  /* height: 7vh; */\n  position: absolute;\n  top: 0;\n  bottom: 90%;\n  \n  /* align-items: center;\n  justify-content: center; */\n}\n\n\ndiv.makesee > button{\n  margin: 0 auto;\n  border: none;\n  background-color: transparent;\n  color: white;\n}\n\ndiv.make,\ndiv.see {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  \n  width: 100%;\n}\n\ndiv.make > a,\ndiv.see > a {\n  background-color: darkblue;\n  color: white;\n  border-radius: 10px;\n  padding: 10px;\n  /* width: 60%;\n  margin: 0 auto; */\n}\n\ndiv.make > a:link:hover,\ndiv.see > a:link:hover {\n  color: white;\n}\ndiv.make > a:visited,\ndiv.see > a:visited {\n  color: white;\n}\ndiv.make > a:active\ndiv.see > a:active {\n  color: lightblue;\n}\n\n\ndiv.default {\n  width: 100%;\n  color: black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  \n}\n/* div.default > h3 {\n  border: 1px black solid;\n} */\n\ndiv.default > button{\n  margin: 0 auto;\n  border: 3.5px solid white;\n  background-color: transparent;\n  color: white;\n\n  background-color: darkblue;\n  \n  border-radius: 10px;\n  padding: 10px;\n}","",{version:3,sources:["webpack://./src/styles/Navigation.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,gBAAgB;EAChB,YAAY;EACZ,gBAAgB;EAChB,uBAAuB;EACvB,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,QAAQ;EACR,SAAS;EACT,aAAa;;EAEb,aAAa;AACf;;AAEA;EACE,uBAAuB;EACvB,WAAW;EACX,aAAa;EACb,iBAAiB;EACjB,kBAAkB;EAClB,MAAM;EACN,WAAW;;EAEX;4BAC0B;AAC5B;;;AAGA;EACE,cAAc;EACd,YAAY;EACZ,6BAA6B;EAC7B,YAAY;AACd;;AAEA;;EAEE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,6BAA6B;;EAE7B,WAAW;AACb;;AAEA;;EAEE,0BAA0B;EAC1B,YAAY;EACZ,mBAAmB;EACnB,aAAa;EACb;mBACiB;AACnB;;AAEA;;EAEE,YAAY;AACd;AACA;;EAEE,YAAY;AACd;AACA;;EAEE,gBAAgB;AAClB;;;AAGA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,6BAA6B;;AAE/B;AACA;;GAEG;;AAEH;EACE,cAAc;EACd,yBAAyB;EACzB,6BAA6B;EAC7B,YAAY;;EAEZ,0BAA0B;;EAE1B,mBAAmB;EACnB,aAAa;AACf",sourcesContent:["div.databases-wrapper {\n  color: yellow;\n  margin-top: 50px;\n  height: 80vh;\n  overflow: scroll;\n  border: 1px black solid;\n  position: absolute;\n  bottom: 10%;\n  margin: 0;\n  left: 3%;\n  right: 3%;\n  padding: none;\n\n  display: flex;\n}\n\ndiv.makesee {\n  background-color: black;\n  width: 100%;  \n  display: flex;\n  /* height: 7vh; */\n  position: absolute;\n  top: 0;\n  bottom: 90%;\n  \n  /* align-items: center;\n  justify-content: center; */\n}\n\n\ndiv.makesee > button{\n  margin: 0 auto;\n  border: none;\n  background-color: transparent;\n  color: white;\n}\n\ndiv.make,\ndiv.see {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  \n  width: 100%;\n}\n\ndiv.make > a,\ndiv.see > a {\n  background-color: darkblue;\n  color: white;\n  border-radius: 10px;\n  padding: 10px;\n  /* width: 60%;\n  margin: 0 auto; */\n}\n\ndiv.make > a:link:hover,\ndiv.see > a:link:hover {\n  color: white;\n}\ndiv.make > a:visited,\ndiv.see > a:visited {\n  color: white;\n}\ndiv.make > a:active\ndiv.see > a:active {\n  color: lightblue;\n}\n\n\ndiv.default {\n  width: 100%;\n  color: black;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  \n}\n/* div.default > h3 {\n  border: 1px black solid;\n} */\n\ndiv.default > button{\n  margin: 0 auto;\n  border: 3.5px solid white;\n  background-color: transparent;\n  color: white;\n\n  background-color: darkblue;\n  \n  border-radius: 10px;\n  padding: 10px;\n}"],sourceRoot:""}]);const u=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a=[],i=!0,u=!1;try{for(t=t.call(e);!(i=(r=t.next()).done)&&(a.push(r.value),!n||a.length!==n);i=!0);}catch(e){u=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(u)throw o}}return a}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var u=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),l="/*# ".concat(c," */"),s=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(s).concat([l]).join("\n")}return[a].join("\n")}},418:e=>{var n=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(e){return n[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,u,c=o(e),l=1;l<arguments.length;l++){for(var s in i=Object(arguments[l]))t.call(i,s)&&(c[s]=i[s]);if(n){u=n(i);for(var f=0;f<u.length;f++)r.call(i,u[f])&&(c[u[f]]=i[u[f]])}}return c}},408:(e,n,t)=>{var r=t(418),o=60103,a=60106;n.Fragment=60107,n.StrictMode=60108,n.Profiler=60114;var i=60109,u=60110,c=60112;n.Suspense=60113;var l=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),n.Fragment=f("react.fragment"),n.StrictMode=f("react.strict_mode"),n.Profiler=f("react.profiler"),i=f("react.provider"),u=f("react.context"),c=f("react.forward_ref"),n.Suspense=f("react.suspense"),l=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function y(e,n,t){this.props=e,this.context=n,this.refs=v,this.updater=t||A}function h(){}function m(e,n,t){this.props=e,this.context=n,this.refs=v,this.updater=t||A}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},h.prototype=y.prototype;var b=m.prototype=new h;b.constructor=m,r(b,y.prototype),b.isPureReactComponent=!0;var E={current:null},g=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function B(e,n,t){var r,a={},i=null,u=null;if(null!=n)for(r in void 0!==n.ref&&(u=n.ref),void 0!==n.key&&(i=""+n.key),n)g.call(n,r)&&!C.hasOwnProperty(r)&&(a[r]=n[r]);var c=arguments.length-2;if(1===c)a.children=t;else if(1<c){for(var l=Array(c),s=0;s<c;s++)l[s]=arguments[s+2];a.children=l}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===a[r]&&(a[r]=c[r]);return{$$typeof:o,type:e,key:i,ref:u,props:a,_owner:E.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var w=/\/+/g;function x(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function _(e,n,t,r,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var c=!1;if(null===e)c=!0;else switch(u){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case o:case a:c=!0}}if(c)return i=i(c=e),e=""===r?"."+x(c,0):r,Array.isArray(i)?(t="",null!=e&&(t=e.replace(w,"$&/")+"/"),_(i,n,t,"",(function(e){return e}))):null!=i&&(k(i)&&(i=function(e,n){return{$$typeof:o,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,t+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(w,"$&/")+"/")+e)),n.push(i)),1;if(c=0,r=""===r?".":r+":",Array.isArray(e))for(var l=0;l<e.length;l++){var s=r+x(u=e[l],l);c+=_(u,n,t,s,i)}else if("function"==typeof(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),l=0;!(u=e.next()).done;)c+=_(u=u.value,n,t,s=r+x(u,l++),i);else if("object"===u)throw n=""+e,Error(p(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n));return c}function j(e,n,t){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function S(e){if(-1===e._status){var n=e._result;n=n(),e._status=0,e._result=n,n.then((function(n){0===e._status&&(n=n.default,e._status=1,e._result=n)}),(function(n){0===e._status&&(e._status=2,e._result=n)}))}if(1===e._status)return e._result;throw e._result}var O={current:null};function R(){var e=O.current;if(null===e)throw Error(p(321));return e}var $={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:r};n.Children={map:j,forEach:function(e,n,t){j(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return j(e,(function(){n++})),n},toArray:function(e){return j(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error(p(143));return e}},n.Component=y,n.PureComponent=m,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$,n.cloneElement=function(e,n,t){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,u=e.ref,c=e._owner;if(null!=n){if(void 0!==n.ref&&(u=n.ref,c=E.current),void 0!==n.key&&(i=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in n)g.call(n,s)&&!C.hasOwnProperty(s)&&(a[s]=void 0===n[s]&&void 0!==l?l[s]:n[s])}var s=arguments.length-2;if(1===s)a.children=t;else if(1<s){l=Array(s);for(var f=0;f<s;f++)l[f]=arguments[f+2];a.children=l}return{$$typeof:o,type:e.type,key:i,ref:u,props:a,_owner:c}},n.createContext=function(e,n){return void 0===n&&(n=null),(e={$$typeof:u,_calculateChangedBits:n,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=B,n.createFactory=function(e){var n=B.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:c,render:e}},n.isValidElement=k,n.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:S}},n.memo=function(e,n){return{$$typeof:l,type:e,compare:void 0===n?null:n}},n.useCallback=function(e,n){return R().useCallback(e,n)},n.useContext=function(e,n){return R().useContext(e,n)},n.useDebugValue=function(){},n.useEffect=function(e,n){return R().useEffect(e,n)},n.useImperativeHandle=function(e,n,t){return R().useImperativeHandle(e,n,t)},n.useLayoutEffect=function(e,n){return R().useLayoutEffect(e,n)},n.useMemo=function(e,n){return R().useMemo(e,n)},n.useReducer=function(e,n,t){return R().useReducer(e,n,t)},n.useRef=function(e){return R().useRef(e)},n.useState=function(e){return R().useState(e)},n.version="17.0.2"},294:(e,n,t)=>{e.exports=t(408)},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],u=0;u<e.length;u++){var c=e[u],l=r.base?c[0]+r.base:c[0],s=a[l]||0,f="".concat(l," ").concat(s);a[l]=s+1;var d=t(f),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(n[d].references++,n[d].updater(p)):n.push({identifier:f,updater:o(p,r),references:1}),i.push(f)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var u=t(a[i]);n[u].references--}for(var c=r(e,o),l=0;l<a.length;l++){var s=t(a[l]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r=t.css,o=t.media,a=t.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},y={};function h(e){var n=y[e];if(void 0!==n)return n.exports;var t=y[e]={id:e,exports:{}};return v[e](t,t.exports,h),t.exports}h.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return h.d(n,{a:n}),n},h.d=(e,n)=>{for(var t in n)h.o(n,t)&&!h.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},h.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e=h(294),n=h(379),t=h.n(n),r=h(795),o=h.n(r),a=h(569),i=h.n(a),u=h(565),c=h.n(u),l=h(216),s=h.n(l),f=h(589),d=h.n(f),p=h(799),(A={}).styleTagTransform=d(),A.setAttributes=c(),A.insert=i().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=s(),t()(p.Z,A),p.Z&&p.Z.locals&&p.Z.locals,e.Component})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,